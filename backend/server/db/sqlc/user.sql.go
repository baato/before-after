// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, role, created_at, email_address, is_email_verified, picture_url FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
		&i.EmailAddress,
		&i.IsEmailVerified,
		&i.PictureUrl,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, role, created_at, email_address, is_email_verified, picture_url FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
		&i.EmailAddress,
		&i.IsEmailVerified,
		&i.PictureUrl,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, role, created_at, email_address, is_email_verified, picture_url FROM users
ORDER BY username ASC
LIMIT $1 
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Role,
			&i.CreatedAt,
			&i.EmailAddress,
			&i.IsEmailVerified,
			&i.PictureUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET 
username = COALESCE($2, username), 
role = COALESCE($3, role),
email_address = COALESCE($4, email_address),
is_email_verified = COALESCE($5, is_email_verified),
picture_url = COALESCE($6, picture_url)
WHERE id = $1
RETURNING id, username, role, created_at, email_address, is_email_verified, picture_url
`

type UpdateUserParams struct {
	ID              int32          `json:"id"`
	Username        string         `json:"username"`
	Role            int32          `json:"role"`
	EmailAddress    sql.NullString `json:"email_address"`
	IsEmailVerified sql.NullBool   `json:"is_email_verified"`
	PictureUrl      sql.NullString `json:"picture_url"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Role,
		arg.EmailAddress,
		arg.IsEmailVerified,
		arg.PictureUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
		&i.EmailAddress,
		&i.IsEmailVerified,
		&i.PictureUrl,
	)
	return i, err
}
